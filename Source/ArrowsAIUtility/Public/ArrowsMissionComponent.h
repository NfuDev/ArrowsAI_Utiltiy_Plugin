// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "Components/ActorComponent.h"
#include "Engine/DataAsset.h"
#include "ArrowsMissionComponent.generated.h"


UCLASS(Blueprintable, BlueprintType, ClassGroup = (Custom), meta = (BlueprintSpawnableComponent))
class ARROWSAIUTILITY_API UArrowsMissionComponent : public UActorComponent
{
	GENERATED_BODY()

public:	
	// Sets default values for this component's properties
	UArrowsMissionComponent();

protected:
	// Called when the game starts
	virtual void BeginPlay() override;

public:	
	// Called every frame
	virtual void TickComponent(float DeltaTime, ELevelTick TickType, FActorComponentTickFunction* ThisTickFunction) override;

	

		
};


//UCLASS(Blueprintable, BlueprintType)
//class ARROWSAIUTILITY_API UMissionAction : public UDataAsset
//{
//	GENERATED_BODY()
//
//	UMissionAction();
//
//	UPROPERTY(EditAnywhere)
//	FText ActionText;
//
//	UPROPERTY(EditAnywhere)
//	bool Countable;
//};
//
//USTRUCT(BlueprintType)
//struct FMissionActionStates
//{
//	GENERATED_BODY()
//
//	UPROPERTY(EditAnywhere)
//	TSubclassOf<UMissionAction> MissionAction;
//
//	UPROPERTY(EditAnywhere)
//	int32 Count;
//
//	UPROPERTY(EditAnywhere)
//	bool Done;
//
//};
//
//
//UCLASS(Blueprintable, BlueprintType)
//class ARROWSAIUTILITY_API UMissionObject : public UObject
//{
//	GENERATED_BODY()
//
//	UMissionObject();
//
//public:
//	/*Called When Mission Object Is Generated By The Mission Component*/
//	UFUNCTION(BlueprintNativeEvent)
//	void MissionBegin();
//
//	UFUNCTION(BlueprintNativeEvent)
//	void MissionTick();
//
//	UFUNCTION(BlueprintCallable)
//	void MissionActionPreformed(TSubclassOf<UMissionAction> PreformedAction);
//
//	/*The Class Of The Next Mission To Start When The Current Mission Is Finished Successfully*/
//	UPROPERTY(EditAnywhere, Category = "Mission Settings")
//	TSubclassOf<UMissionObject> NextMission;
//
//	/*Array Of Actions That Are Required For The Current Mission To Succeed*/
//	UPROPERTY(EditAnywhere, Category = "Mission Settings")
//	TArray<TSubclassOf<UMissionAction>> MissionRequiredActions;
//
//	/*Use For UI Only , To Showcase The Status Of Each Mission Task*/
//	UPROPERTY(EditAnywhere, Category = "Mission Settings")
//	TArray<FMissionActionStates> MissionActionsState;
//
//};